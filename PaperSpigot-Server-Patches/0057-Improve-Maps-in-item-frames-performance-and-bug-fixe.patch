From 2a2ef17d1bd8d982e576c47ffc295555ecfaad39 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Wed, 17 Aug 2016 22:43:00 +0800
Subject: [PATCH] Improve Maps (in item frames) performance and bug fixes


diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
new file mode 100644
index 0000000..c6259b6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -0,0 +1,195 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.util.Iterator;
+import java.util.List;
+
+public class CombatTracker {
+
+    private final List<CombatEntry> a = new org.torch.util.ConcurrentIterableArrayList();
+    private final EntityLiving b;
+    private int c;
+    private int d;
+    private int e;
+    private boolean f;
+    private boolean g;
+    private String h;
+
+    public CombatTracker(EntityLiving entityliving) {
+        this.b = entityliving;
+    }
+
+    public void a() {
+        this.j();
+        if (this.b.k_()) {
+            Block block = this.b.world.getType(new BlockPosition(this.b.locX, this.b.getBoundingBox().b, this.b.locZ)).getBlock();
+
+            if (block == Blocks.LADDER) {
+                this.h = "ladder";
+            } else if (block == Blocks.VINE) {
+                this.h = "vines";
+            }
+        } else if (this.b.V()) {
+            this.h = "water";
+        }
+
+    }
+
+    public void a(DamageSource damagesource, float f, float f1) {
+        this.g();
+        this.a();
+        CombatEntry combatentry = new CombatEntry(damagesource, this.b.ticksLived, f, f1, this.h, this.b.fallDistance);
+
+        this.a.add(combatentry);
+        this.c = this.b.ticksLived;
+        this.g = true;
+        if (combatentry.f() && !this.f && this.b.isAlive()) {
+            this.f = true;
+            this.d = this.b.ticksLived;
+            this.e = this.d;
+            this.b.enterCombat();
+        }
+
+    }
+
+    public IChatBaseComponent b() {
+        if (this.a.size() == 0) {
+            return new ChatMessage("death.attack.generic", new Object[] { this.b.getScoreboardDisplayName()});
+        } else {
+            CombatEntry combatentry = this.i();
+            CombatEntry combatentry1 = (CombatEntry) this.a.get(this.a.size() - 1);
+            IChatBaseComponent ichatbasecomponent = combatentry1.h();
+            Entity entity = combatentry1.a().getEntity();
+            Object object;
+
+            if (combatentry != null && combatentry1.a() == DamageSource.FALL) {
+                IChatBaseComponent ichatbasecomponent1 = combatentry.h();
+
+                if (combatentry.a() != DamageSource.FALL && combatentry.a() != DamageSource.OUT_OF_WORLD) {
+                    if (ichatbasecomponent1 != null && (ichatbasecomponent == null || !ichatbasecomponent1.equals(ichatbasecomponent))) {
+                        Entity entity1 = combatentry.a().getEntity();
+                        ItemStack itemstack = entity1 instanceof EntityLiving ? ((EntityLiving) entity1).bA() : null;
+
+                        if (itemstack != null && itemstack.hasName()) {
+                            object = new ChatMessage("death.fell.assist.item", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent1, itemstack.C()});
+                        } else {
+                            object = new ChatMessage("death.fell.assist", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent1});
+                        }
+                    } else if (ichatbasecomponent != null) {
+                        ItemStack itemstack1 = entity instanceof EntityLiving ? ((EntityLiving) entity).bA() : null;
+
+                        if (itemstack1 != null && itemstack1.hasName()) {
+                            object = new ChatMessage("death.fell.finish.item", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent, itemstack1.C()});
+                        } else {
+                            object = new ChatMessage("death.fell.finish", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent});
+                        }
+                    } else {
+                        object = new ChatMessage("death.fell.killer", new Object[] { this.b.getScoreboardDisplayName()});
+                    }
+                } else {
+                    object = new ChatMessage("death.fell.accident." + this.a(combatentry), new Object[] { this.b.getScoreboardDisplayName()});
+                }
+            } else {
+                object = combatentry1.a().getLocalizedDeathMessage(this.b);
+            }
+
+            return (IChatBaseComponent) object;
+        }
+    }
+
+    public EntityLiving c() {
+        EntityLiving entityliving = null;
+        EntityHuman entityhuman = null;
+        float f = 0.0F;
+        float f1 = 0.0F;
+        Iterator iterator = this.a.iterator();
+
+        while (iterator.hasNext()) {
+            CombatEntry combatentry = (CombatEntry) iterator.next();
+
+            if (combatentry.a().getEntity() instanceof EntityHuman && (entityhuman == null || combatentry.c() > f1)) {
+                f1 = combatentry.c();
+                entityhuman = (EntityHuman) combatentry.a().getEntity();
+            }
+
+            if (combatentry.a().getEntity() instanceof EntityLiving && (entityliving == null || combatentry.c() > f)) {
+                f = combatentry.c();
+                entityliving = (EntityLiving) combatentry.a().getEntity();
+            }
+        }
+
+        if (entityhuman != null && f1 >= f / 3.0F) {
+            return entityhuman;
+        } else {
+            return entityliving;
+        }
+    }
+
+    private CombatEntry i() {
+        CombatEntry combatentry = null;
+        CombatEntry combatentry1 = null;
+        byte b0 = 0;
+        float f = 0.0F;
+
+        for (int i = 0; i < this.a.size(); ++i) {
+            CombatEntry combatentry2 = (CombatEntry) this.a.get(i);
+            CombatEntry combatentry3 = i > 0 ? (CombatEntry) this.a.get(i - 1) : null;
+
+            if ((combatentry2.a() == DamageSource.FALL || combatentry2.a() == DamageSource.OUT_OF_WORLD) && combatentry2.i() > 0.0F && (combatentry == null || combatentry2.i() > f)) {
+                if (i > 0) {
+                    combatentry = combatentry3;
+                } else {
+                    combatentry = combatentry2;
+                }
+
+                f = combatentry2.i();
+            }
+
+            if (combatentry2.g() != null && (combatentry1 == null || combatentry2.c() > (float) b0)) {
+                combatentry1 = combatentry2;
+            }
+        }
+
+        if (f > 5.0F && combatentry != null) {
+            return combatentry;
+        } else if (b0 > 5 && combatentry1 != null) {
+            return combatentry1;
+        } else {
+            return null;
+        }
+    }
+
+    private String a(CombatEntry combatentry) {
+        return combatentry.g() == null ? "generic" : combatentry.g();
+    }
+
+    public int f() {
+        return this.f ? this.b.ticksLived - this.d : this.e - this.d;
+    }
+
+    private void j() {
+        this.h = null;
+    }
+
+    public void g() {
+        int i = this.f ? 300 : 100;
+
+        if (this.g && (!this.b.isAlive() || this.b.ticksLived - this.c > i)) {
+            boolean flag = this.f;
+
+            this.g = false;
+            this.f = false;
+            this.e = this.b.ticksLived;
+            if (flag) {
+                this.b.exitCombat();
+            }
+
+            this.a.clear();
+        }
+
+    }
+
+    public EntityLiving h() {
+        return this.b;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 0ad4edb..df04ade 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -617,6 +617,13 @@ public abstract class EntityHuman extends EntityLiving {
                 return null;
             }
             // CraftBukkit end
+			
+			// Paper start - remove player from map on drop
+            if (itemstack.getItem() == Items.FILLED_MAP) {
+                 WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, this.world);
+                worldmap.updateSeenPlayers(this, itemstack);
+            }
+            // Paper stop
 
             this.a(entityitem);
             if (flag1) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 1fc2388..e5b9186 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -84,11 +84,11 @@ public class EntityTrackerEntry {
             this.broadcast(new PacketPlayOutAttachEntity(0, this.tracker, this.tracker.vehicle));
         }
 
-        if (this.tracker instanceof EntityItemFrame /*&& this.m % 10 == 0*/) { // CraftBukkit - Moved below, should always enter this block
+		if (this.tracker instanceof EntityItemFrame && this.m % 20 == 0) { // Paper
             EntityItemFrame entityitemframe = (EntityItemFrame) this.tracker;
             ItemStack itemstack = entityitemframe.getItem();
 
-            if (this.m % 10 == 0 && itemstack != null && itemstack.getItem() instanceof ItemWorldMap) { // CraftBukkit - Moved this.m % 10 logic here so item frames do not enter the other blocks
+			if (itemstack != null && itemstack.getItem() instanceof ItemWorldMap) { // Paper - moved back up
                 WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, this.tracker.world);
                 Iterator iterator = this.trackedPlayers.iterator(); // CraftBukkit
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5011b3f..a4b132e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -50,6 +50,7 @@ import co.aikar.timings.SpigotTimings; // Spigot
 
 public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
 
+	private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogManager.getLogger();
     public static final File a = new File("usercache.json");
     private static MinecraftServer l;
@@ -130,6 +131,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     // CraftBukkit end
 
     public MinecraftServer(OptionSet options, Proxy proxy, File file1) {
+		SERVER = this; // Paper - better singleton
         io.netty.util.ResourceLeakDetector.setEnabled( false ); // Spigot - disable
         this.e = proxy;
         MinecraftServer.l = this;
@@ -1180,7 +1182,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
 
     public static MinecraftServer getServer() {
-        return MinecraftServer.l;
+        return SERVER;
     }
 
     public boolean O() {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 22e39bd..47ced3f 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1106,6 +1106,7 @@ public abstract class World implements IBlockAccess {
                     {
                         if ( iter.next().trackee == entity )
                         {
+							map.decorations.remove(entity.getUniqueID()); // Paper
                             iter.remove();
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 162b3a3..b51e2e0 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -25,6 +25,7 @@ public class WorldMap extends PersistentBase {
     public List<WorldMap.WorldMapHumanTracker> g = Lists.newArrayList();
     public Map<EntityHuman, WorldMap.WorldMapHumanTracker> i = Maps.newHashMap(); // Spigot
     public Map<UUID, MapIcon> decorations = Maps.newLinkedHashMap(); // Spigot
+	private org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
 
     // CraftBukkit start
     public final CraftMapView mapView;
@@ -37,6 +38,7 @@ public class WorldMap extends PersistentBase {
         // CraftBukkit start
         mapView = new CraftMapView(this);
         server = (CraftServer) org.bukkit.Bukkit.getServer();
+		vanillaRender.buffer = colors; // Paper
         // CraftBukkit end
     }
 
@@ -104,6 +106,7 @@ public class WorldMap extends PersistentBase {
                 }
             }
         }
+		vanillaRender.buffer = colors; // Paper
 
     }
 
@@ -136,6 +139,7 @@ public class WorldMap extends PersistentBase {
         nbttagcompound.setByteArray("colors", this.colors);
     }
 
+	public void updateSeenPlayers(EntityHuman entityhuman, ItemStack itemstack) { a(entityhuman, itemstack); } // Paper // OBFHELPER
     public void a(EntityHuman entityhuman, ItemStack itemstack) {
         if (!this.i.containsKey(entityhuman)) {
             WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = new WorldMap.WorldMapHumanTracker(entityhuman);
@@ -262,6 +266,21 @@ public class WorldMap extends PersistentBase {
 
     public class WorldMapHumanTracker {
 
+		// Paper start
+        private void addSeenPlayers(java.util.Collection<MapIcon> icons) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) trackee.getBukkitEntity();
+            WorldMap.this.decorations.forEach((uuid, mapIcon) -> {
+                // If this cursor is for a player check visibility with vanish system
+                org.bukkit.entity.Player other = org.bukkit.Bukkit.getPlayer(uuid); // Spigot
+                if (other == null || player.canSee(other)) {
+                    icons.add(mapIcon);
+                }
+            });
+        }
+        private boolean shouldUseVanillaMap() {
+            return mapView.getRenderers().size() == 1 && mapView.getRenderers().get(0).getClass() == org.bukkit.craftbukkit.map.CraftMapRenderer.class;
+        }
+        // Paper stop
         public final EntityHuman trackee;
         private boolean d = true;
         private int e = 0;
@@ -277,9 +296,12 @@ public class WorldMap extends PersistentBase {
 
         public Packet a(ItemStack itemstack) {
             // CraftBukkit start
-            org.bukkit.craftbukkit.map.RenderData render = WorldMap.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.trackee.getBukkitEntity()); // CraftBukkit
+            if (!this.d && this.i % 5 != 0) { this.i++; return null; } // Paper - this won't end up sending, so don't render it!
+            boolean vanillaMaps = shouldUseVanillaMap(); // Paper
+            org.bukkit.craftbukkit.map.RenderData render = !vanillaMaps ? WorldMap.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.trackee.getBukkitEntity()) : WorldMap.this.vanillaRender; // CraftBukkit // Paper
 
             java.util.Collection<MapIcon> icons = new java.util.ArrayList<MapIcon>();
+			if (vanillaMaps) addSeenPlayers(icons); // Paper
 
             for ( org.bukkit.map.MapCursor cursor : render.cursors) {
 
diff --git a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
index 256a131..5768cd5 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
@@ -5,7 +5,7 @@ import org.bukkit.map.MapCursor;
 
 public class RenderData {
 
-    public final byte[] buffer;
+    public byte[] buffer; // Paper
     public final ArrayList<MapCursor> cursors;
 
     public RenderData() {
diff --git a/src/main/java/org/torch/util/ConcurrentIterableArrayList.java b/src/main/java/org/torch/util/ConcurrentIterableArrayList.java
new file mode 100644
index 0000000..e2fd90d
--- /dev/null
+++ b/src/main/java/org/torch/util/ConcurrentIterableArrayList.java
@@ -0,0 +1,40 @@
+package org.torch.util;
+
+/**
+ * From TickThreading project.
+ * @Link: https://github.com/nallar/TickThreading
+ */
+
+import java.util.*;
+
+public class ConcurrentIterableArrayList<T> extends ArrayList<T> {
+	private static final long serialVersionUID = 0;
+	private int index;
+
+	public synchronized void reset() {
+		index = 0;
+	}
+
+	public synchronized T next() {
+		return index < size() ? this.get(index++) : null;
+	}
+
+	@Override
+	public synchronized T remove(int index) {
+		if (index < this.index) {
+			this.index--;
+		}
+		return super.remove(index);
+	}
+
+	@Override
+	public boolean remove(Object o) {
+		for (int index = 0; index < size(); index++) {
+			if (o.equals(get(index))) {
+				remove(index);
+				return true;
+			}
+		}
+		return false;
+	}
+}
\ No newline at end of file
-- 
2.8.2.windows.1

